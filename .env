const mongoose = require('mongoose');
require('dotenv').config();

// Connexion à MongoDB
mongoose.connect(process.env.MONGO_URI, {
  useNewUrlParser: true,
  useUnifiedTopology: true
})
.then(() => console.log('Connecté à MongoDB !'))
.catch(err => console.error('Erreur de connexion à MongoDB :', err));

const mongoose = require('mongoose');

// Définition du schéma Person
const personSchema = new mongoose.Schema({
  name: { type: String, required: true },
  age: Number,
  favoriteFoods: [String] // Tableau de chaînes de caractères
});

// Création du modèle Person
const Person = mongoose.model('Person', personSchema);

const person = new Person({
  name: 'Alice',
  age: 30,
  favoriteFoods: ['Pizza', 'Pasta']
});

person.save(function(err, data) {
  if (err) return console.error(err);
  console.log('Personne sauvegardée :', data);
});

const arrayOfPeople = [
  { name: 'Bob', age: 25, favoriteFoods: ['Burritos', 'Tacos'] },
  { name: 'Mary', age: 35, favoriteFoods: ['Burritos', 'Pizza'] }
];

Person.create(arrayOfPeople, function(err, data) {
  if (err) return console.error(err);
  console.log('Personnes créées :', data);
});

Person.find({ name: 'Bob' }, function(err, people) {
  if (err) return console.error(err);
  console.log('Personnes trouvées :', people);
});

const food = 'Pizza';
Person.findOne({ favoriteFoods: food }, function(err, person) {
  if (err) return console.error(err);
  console.log('Personne trouvée :', person);
});

const personId = 'l_id_de_personne'; // Remplacez par un ID valide
Person.findById(personId, function(err, person) {
  if (err) return console.error(err);
  console.log('Personne trouvée par ID :', person);
});

const personId = 'l_id_de_personne'; // Remplacez par un ID valide

Person.findById(personId, function(err, person) {
  if (err) return console.error(err);
  
  person.favoriteFoods.push('Hamburger');
  person.markModified('favoriteFoods'); // Si nécessaire
  person.save(function(err, updatedPerson) {
    if (err) return console.error(err);
    console.log('Personne mise à jour :', updatedPerson);
  });
});

const personName = 'Bob';

Person.findOneAndUpdate(
  { name: personName },
  { age: 20 },
  { new: true }, // Pour renvoyer le document mis à jour
  function(err, updatedPerson) {
    if (err) return console.error(err);
    console.log('Personne mise à jour :', updatedPerson);
  }
);

const personId = 'l_id_de_personne'; // Remplacez par un ID valide

Person.findByIdAndRemove(personId, function(err, removedPerson) {
  if (err) return console.error(err);
  console.log('Personne supprimée :', removedPerson);
});

Person.remove({ name: 'Mary' }, function(err, result) {
  if (err) return console.error(err);
  console.log('Documents supprimés :', result);
});

Person.find({ favoriteFoods: 'Burritos' })
  .sort({ name: 1 })  // Trie par nom croissant
  .limit(2)           // Limite à 2 résultats
  .select('-age')    // Exclut le champ age
  .exec(function(err, people) {
    if (err) return console.error(err);
    console.log('Personnes trouvées :', people);
  });

// Connexion à MongoDB
mongoose.connect(process.env.MONGO_URI, { useNewUrlParser: true, useUnifiedTopology: true })
  .then(() => console.log('Connexion réussie à MongoDB'))
  .catch(err => console.error('Erreur de connexion à MongoDB', err));


